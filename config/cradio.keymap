/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define _BASE 0
#define _SYMB 1
#define _NAVI 2
#define _FUNC 3
#define _SYST 4

&lt {
    tapping-term-ms = <250>;
    flavor = "tap-preferred";
};

&mt {
    tapping-term-ms = <200>;
};

&sk {
     release-after-ms = <1000>;
     quick-release;
};

&sl {
    /delete-property/ quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS PIPE>; // BSPC
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        qhm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        tdss: tap_dance_smart_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SMART_SHIFT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };
    };

    combos {
        #include "combos.def"
        combo_lt {
            bindings = <&kp LT>;
            key-positions = <16  7>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_gt {
            bindings = <&kp GT>;
            key-positions = <7 18>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <26 27>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <27 28>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <26 28>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_under {
            bindings = <&kp UNDER>;
            key-positions = <26 27 28>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <7 8>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_at {
            bindings = <&kp AT>;
            key-positions = <1 2>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_astr {
            bindings = <&kp STAR>;
            key-positions = <6 7>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <2 3>;
            timeout-ms = <30>;
            layers = <0>;
        };
        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <50>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
                        bindings = <
    &kp Q       &kp W       &kp E       &kp R       &kp T              &kp Y       &kp U       &kp I       &kp O       &kp P
    &hm LCTRL A   &hm LALT S   &hm LGUI D   &hm LSHFT F   &kp G              &kp H       &hm RSHFT J   &hm RGUI K   &hm LALT L   &hm RCTRL SEMI
    &kp Z       &kp X       &kp C       &kp V       &kp B              &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH
                                        &lt _NAVI SPACE &kp BSPC           &tdss       &lt _SYMB ENTER
                        >;
                };
        symbol_layer {
                        bindings = <
    &kp N1      &kp N2      &kp N3      &kp N4      &kp N5              &kp N6       &kp N7      &kp N8      &kp N9      &kp N0
    &hm LCTRL DLLR  &hm LALT PLUS  &hm LGUI LPAR  &hm LSHFT RPAR  &kp BSLH            &kp PIPE     &hm RSHFT MINUS &hm RGUI EQUAL &hm LALT UNDER &hm RCTRL ASTRK
    &kp EXCL    &kp SQT     &kp LBRC    &kp RBRC    &kp TILDE           &kp AMPS     &kp LBKT    &kp RBKT    &kp PERCENT &kp CARET
                                        &mo _FUNC   &trans              &trans       &trans
                        >;
                };
        nav_layer {
                        bindings = <
    &kp TILDE   &kp GRAVE   &none       &none       &sl _SYST          &kp PG_UP     &kp LG(LEFT) &kp UP      &kp LG(RIGHT) &kp C_VOL_UP
    &sk LCTRL   &sk LALT    &sk LGUI    &sk LSHFT   &kp LG(A)          &kp PG_DN     &kp LEFT     &kp DOWN    &kp RIGHT   &kp C_VOL_DN
    &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &kp LG(LS(Z))      &kp ESC       &kp C_PREV   &kp C_PP    &kp C_NEXT  &kp C_MUTE
                                        &trans      &trans             &kp TAB       &mo _FUNC
                        >;
                };
        function_layer {
                        bindings = <
        &kp F1      &kp F2      &kp F3      &kp F4      &kp F5             &kp F6      &kp F7      &kp F8      &kp F9      &kp F10
        &kp LCTRL   &kp LALT    &kp LGUI    &kp LSHFT   &none              &none       &kp AT      &kp HASH    &kp COLON   &kp BSLH
        &none       &kp F12     &kp F13     &none       &trans             &kp F11     &kp LT      &kp GT      &kp F14     &kp F15
                                            &trans      &trans             &trans      &trans
                        >;
                };
        system_layer {
                        bindings = <
    &bootloader     &reset          &out OUT_USB    &out OUT_BLE    &none              &none        &out OUT_BLE    &out OUT_USB    &reset          &bootloader
    &none           &none           &none           &none           &none              &none        &none           &none           &none           &none
    &none           &bt BT_SEL 2    &bt BT_SEL 1    &bt BT_SEL 0    &bt BT_CLR         &bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &none
                                                    &trans          &trans             &trans       &trans
                        >;
                };
        };
};
